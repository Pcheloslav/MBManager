# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mdm.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from datetime import datetime
from pymodbus import bit_write_message
from pymodbus.client.sync import ModbusSerialClient as ModbusClient
from pymodbus.payload import BinaryPayloadDecoder
from pymodbus.compat import iteritems
from pymodbus.constants import Endian
from pymodbus.exceptions import *
import time
import ModbusDatabaseManager
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QTableWidgetItem
import threading


#my_list = []
state = 0

is_on = 0


def establish_connection():
    global state
    state = 1
    USB_PORT = 'COM6'
    PARITY = 'N'  # 'N'
    BAUD_RATE = 9600
    TIMEOUT = 1
    global client
    client = ModbusClient(method='rtu',
                          port=USB_PORT,
                          stopbits=1,
                          bytesize=8,
                          parity=PARITY,
                          baudrate=BAUD_RATE,
                          timeout=TIMEOUT, )


    for i in range(1, 2):
        connection = client.connect()
        print(f"COM Details {client.socket}")
        print(f"Connection status is: {connection} \nClient State: {client.state} \nTimeout: {client.timeout}")
        try:
            holding_values = client.read_holding_registers(0x0000, 21, unit=0x01)  #  ДИМА ! вот это говно считывает нужную нам инфу и ее нужно фигачить в бд
            print(holding_values.registers)  # а еще нужно обновлять значения каждые 5 мин
            global lol
            lol = ModbusDatabaseManager.ModbusDatabaseManager()
            lol.open_connection()
            lol.add_record(holding_values.registers)
            kok = lol.fetch_last_n_raws(3)
            lol.close_connection()


        except ConnectionException as e:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("НЕ подключено к усб")
            msg.setWindowTitle("Error")
            msg.exec_()
            print(f"USB Disconnected {e}")


def time_func():
    global client
    global lol
    holding_values = client.read_holding_registers(0x0000, 21, unit=0x01)
    lol.add_record(holding_values.registers)
    lol.fetch_last_n_raws(3)
    import main
    main.form.loaddata()


def switchtoremote():
    global state
    global is_on
    is_on = 0
    if state == 0:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Не подключено")
        msg.setWindowTitle("Error")
        msg.exec_()
        return
    value = client.read_holding_registers(0x081a, 1)
    if value.registers[0] != 2:  # __getitem__(1)
        client.write_register(0x081A, 0x02, unit=0x01)
    else:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Уже в удаленном режиме")
        msg.setWindowTitle("Error")
        msg.exec_()


def switchtooff():
    global state
    if state == 0:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Не подключено")
        msg.setWindowTitle("Error")
        msg.exec_()
        return
    value = client.read_holding_registers(0x081a, 1)
    if value.registers[0] != 0:  # __getitem__(1)
        client.write_register(0x081A, 0x00, unit=0x01)
    else:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Уже выключено")
        msg.setWindowTitle("Error")
        msg.exec_()


def switchtoalarm():
    global state
    if state == 0:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Не подключено")
        msg.setWindowTitle("Error")
        msg.exec_()
        return
    value = client.read_holding_registers(0x081a, 1)
    if value.registers[0] != 1:  # __getitem__(1)
        client.write_register(0x081A, 0x01, unit=0x01)
    else:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Уже в сигнале")
        msg.setWindowTitle("Error")
        msg.exec_()


def on():
    global state
    if state == 0:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Не подключено")
        msg.setWindowTitle("Error")
        msg.exec_()
        return
    global is_on
    if is_on == 0:
        is_on = 1
        value = client.read_holding_registers(0x081a, 1)
        if value.registers[0] != 2:
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Не в удаленном режиме")
            msg.setWindowTitle("Error")
            msg.exec_()
        client.write_coil(address=0x00, value=0xff00, unit=0x01)
    else:
        is_on = 0
        value = client.read_holding_registers(0x081a, 1)
        if value.registers[0] != 2:  # __getitem__(1)
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Не в удаленном режиме")
            msg.setWindowTitle("Error")
            msg.exec_()
        client.write_coil(address=0x00, value=0x0000, unit=0x01)


# Выключить лампочку
def off():
    global state
    if state == 0:
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        msg.setText("Не подключено")
        msg.setWindowTitle("Error")
        msg.exec_()
        return
    global is_on
    if is_on == 1:
        is_on = 0
        value = client.read_holding_registers(0x081a, 1)
        if value.registers[0] != 2:  # __getitem__(1)
            msg = QMessageBox()
            msg.setIcon(QMessageBox.Critical)
            msg.setText("Не в удаленном режиме")
            msg.setWindowTitle("Error")
            msg.exec_()
        client.write_coil(address=0x00, value=0x0000, unit=0x01)
    else:
        return


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1920, 1080)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(MainWindow.sizePolicy().hasHeightForWidth())
        MainWindow.setSizePolicy(sizePolicy)
        MainWindow.setMinimumSize(QtCore.QSize(1080, 720))
        MainWindow.setMaximumSize(QtCore.QSize(999, 603))
        MainWindow.setStyleSheet("background-color: rgb(65, 66, 71);\n"
        "border-bottom-color: rgb(217, 104, 29);\n"
        "border-color: rgb(217, 104, 29);\n"
        "border-top-color: rgb(65, 66, 71);\n"
        "")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(810, 60, 241, 71))
        font = QtGui.QFont()
        font.setFamily("Leelawadee UI")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("background-color: rgb(65, 65, 65);\n"
        "selection-color: rgb(255, 255, 255);\n"
        "selection-background-color: rgb(70, 70, 70);\n"
        "color: rgb(255, 255, 255);\n"
        "border-color: rgb(213, 139, 36);\n"
        "")
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(on)

        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(810, 150, 241, 71))
        font = QtGui.QFont()
        font.setFamily("Leelawadee UI")
        font.setPointSize(17)
        font.setBold(True)
        font.setItalic(True)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("background-color: rgb(65, 65, 65);\n"
                                      "selection-color: rgb(255, 255, 255);\n"
                                      "selection-background-color: rgb(70, 70, 70);\n"
                                      "color: rgb(255, 255, 255);\n"
                                      "border-color: rgb(213, 139, 36);\n"
                                      "")
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(establish_connection)


        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 0, 1081, 50))
        font = QtGui.QFont()
        font.setFamily("Ebrima")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setUnderline(False)
        self.label.setFont(font)
        self.label.setStyleSheet("background-color: rgb(0, 0, 0); \n"
        "color: rgb(255, 255, 255);\n"
        "border-color: rgb(236, 127, 19);\n"
        "")
        self.label.setFrameShape(QtWidgets.QFrame.Box)
        self.label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.label.setLineWidth(1)
        self.label.setMidLineWidth(1)
        self.label.setObjectName("label")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(0, 50, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Leelawadee UI")
        font.setPointSize(13)
        font.setBold(True)
        font.setItalic(True)
        font.setUnderline(False)
        font.setStrikeOut(False)
        self.radioButton.setFont(font)
        self.radioButton.setStyleSheet("background-color: rgb(29, 29, 29);\n"
        "background-color: qlineargradient(spread:reflect, x1:0.494, y1:0.926318, x2:0.494682, y2:0.506, stop:0.0397727 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.radioButton.setObjectName("radioButton")
        self.radioButton.clicked.connect(switchtooff)



        self.radioButton_2 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_2.setGeometry(QtCore.QRect(0, 90, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Leelawadee UI")
        font.setPointSize(16)
        font.setBold(True)
        font.setItalic(True)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setStyleSheet("background-color: rgb(29, 29, 29);\n"
        "background-color: qlineargradient(spread:reflect, x1:0.494, y1:0.926318, x2:0.494682, y2:0.506, stop:0.0397727 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.radioButton_2.setObjectName("radioButton_2")
        self.radioButton_2.clicked.connect(switchtoalarm)



        self.radioButton_3 = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton_3.setGeometry(QtCore.QRect(0, 130, 161, 41))
        font = QtGui.QFont()
        font.setFamily("Leelawadee UI")
        font.setPointSize(15)
        font.setBold(True)
        font.setItalic(True)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setStyleSheet("background-color: rgb(29, 29, 29);\n"
        "background-color: qlineargradient(spread:reflect, x1:0.494, y1:0.926318, x2:0.494682, y2:0.506, stop:0.0397727 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255));")
        self.radioButton_3.setObjectName("radioButton_3")
        self.radioButton_3.clicked.connect(switchtoremote)



        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(0, 30, 1080, 720))
        self.label_2.setText("")
        self.label_2.setPixmap(QtGui.QPixmap("D:/Pycharm/MODBASS/imgonline.jpeg"))
        self.label_2.setObjectName("label_2")
        """self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(820, 330, 206, 291))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(1)
        self.tableWidget.setRowCount(7)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)"""
        self.tableWidget_2 = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget_2.setGeometry(QtCore.QRect(30, 380, 1000, 192))
        self.tableWidget_2.setAutoScrollMargin(10)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.tableWidget_2.setColumnCount(7)
        self.tableWidget_2.setColumnWidth(6, 200)
        self.tableWidget_2.setRowCount(3)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget_2.setHorizontalHeaderItem(6, item)

        self.label_2.raise_()
        self.pushButton.raise_()
        self.pushButton_2.raise_()
        self.label.raise_()
        self.radioButton.raise_()
        self.radioButton_2.raise_()
        self.radioButton_3.raise_()
        #self.tableWidget.raise_()
        self.tableWidget_2.raise_()
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 999, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def loaddata(self):
        date = datetime.now()
        my_list = [1000, 25, 0, 0, 0, 0, 17249, 8520, 17248, 53740, 17249, 17346, 54395, 17346, 53740, 17346, 62587, 16968, 2621, 0, 20]
        row = 0
        input_list = []
        input_list.extend(my_list[6:9])
        input_list.extend(my_list[13:16])
        input_list.append(date)
        i = 0
        while i < len(input_list):
            self.tableWidget_2.setItem(row, 0, QTableWidgetItem(str(input_list[i])))
            self.tableWidget_2.setItem(row, 1, QTableWidgetItem(str(input_list[i + 1])))
            self.tableWidget_2.setItem(row, 2, QTableWidgetItem(str(input_list[i + 2])))
            self.tableWidget_2.setItem(row, 3, QTableWidgetItem(str(input_list[i + 3])))
            self.tableWidget_2.setItem(row, 4, QTableWidgetItem(str(input_list[i + 4])))
            self.tableWidget_2.setItem(row, 5, QTableWidgetItem(str(input_list[i + 5])))
            self.tableWidget_2.setItem(row, 6, QTableWidgetItem(str(input_list[i + 6])))
            row = row + 1
            i = i + 7


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MBManager"))
        self.pushButton.setText(_translate("MainWindow", "Вкл/Выкл Свет"))
        self.pushButton_2.setText(_translate("MainWindow", "Подключиться"))
        self.label.setText(_translate("MainWindow", "MBManager"))
        self.radioButton.setText(_translate("MainWindow", "Выключить"))
        self.radioButton_2.setText(_translate("MainWindow", "Сигнал"))
        self.radioButton_3.setText(_translate("MainWindow", "Удалённо"))
        """item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Ua"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "Ub"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "Uc"))
        item = self.tableWidget.verticalHeaderItem(3)
        item.setText(_translate("MainWindow", "Ia"))
        item = self.tableWidget.verticalHeaderItem(4)
        item.setText(_translate("MainWindow", "Ib"))
        item = self.tableWidget.verticalHeaderItem(5)
        item.setText(_translate("MainWindow", "Ic"))
        item = self.tableWidget.verticalHeaderItem(6)
        item.setText(_translate("MainWindow", "Время"))



        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Значения"))"""
        item = self.tableWidget_2.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Дата 1"))
        item = self.tableWidget_2.verticalHeaderItem(1)
        item.setText(_translate("MainWindow", "Дата 2"))
        item = self.tableWidget_2.verticalHeaderItem(2)
        item.setText(_translate("MainWindow", "Дата 3"))
        item = self.tableWidget_2.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Ua"))
        item = self.tableWidget_2.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Ub"))
        item = self.tableWidget_2.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Uc"))
        item = self.tableWidget_2.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Ia"))
        item = self.tableWidget_2.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Ib"))
        item = self.tableWidget_2.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Ic"))
        item = self.tableWidget_2.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "Время"))
        self.loaddata()




